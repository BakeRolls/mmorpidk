// Generated by CoffeeScript 1.6.2
var Player;

Player = (function() {
  function Player(data) {
    this.busy = false;
    this.direction = data.direction;
    this.frame = 0;
    this.id = data.id;
    this.life = data.life;
    this.position = data.position;
    this.power = data.power;
    this.size = data.size;
    this.speed = data.speed;
    this.sprite = new Image();
    this.sprite.src = data.sprite;
    this.text = '';
    this.tPosition = this.position;
  }

  Player.prototype.draw = function() {
    var startX, startY;

    getGamepad();
    this.keyPressed();
    this.move();
    if (this.direction === 'up') {
      startX = 2;
    }
    if (this.direction === 'down') {
      startX = 0;
    }
    if (this.direction === 'left') {
      startX = 1;
    }
    if (this.direction === 'right') {
      startX = 3;
    }
    startX = startX * this.size.x;
    if (this.busy && frame % 10 === 0) {
      this.frame += 1;
    }
    if (this.frame > 3 || !this.busy) {
      this.frame = 0;
    }
    startY = this.frame * this.size.y;
    this.frame;
    return ctx.drawImage(this.sprite, startX, startY, this.size.x, this.size.y, this.position.x, this.position.y - (this.size.y - map.map.tileheight), this.size.x, this.size.y);
  };

  Player.prototype.drawHealthBar = function() {
    if (map.map !== void 0) {
      ctx.fillStyle = '#000';
      ctx.fillRect(this.position.x + 4, this.position.y - (this.size.y - map.map.tileheight) - 6, 24, 1);
      ctx.fillStyle = '#f00';
      return ctx.fillRect(this.position.x + 4, this.position.y - (this.size.y - map.map.tileheight) - 6, 24 / 100 * this.life, 1);
    }
  };

  Player.prototype.die = function() {
    return console.log('you\'re dead');
  };

  Player.prototype.keyPressed = function() {
    if (!this.busy && (window.controls.up || window.controls.down || window.controls.left || window.controls.right || window.controls.space)) {
      if (window.controls.up) {
        socket.emit('move', 'up');
      }
      if (window.controls.down) {
        socket.emit('move', 'down');
      }
      if (window.controls.left) {
        socket.emit('move', 'left');
      }
      if (window.controls.right) {
        socket.emit('move', 'right');
      }
      if (window.controls.space) {
        return socket.emit('attack');
      }
    }
  };

  Player.prototype.move = function() {
    var moved, pxPerFrame;

    if (this.busy) {
      pxPerFrame = 32 / (fps * this.speed);
      switch (this.direction) {
        case 'up':
          if (this.tPosition.y < this.position.y) {
            moved = true;
            return this.position.y -= pxPerFrame;
          } else {
            this.position.y = this.tPosition.y;
            return this.busy = false;
          }
          break;
        case 'down':
          if (this.tPosition.y > this.position.y) {
            moved = true;
            return this.position.y += pxPerFrame;
          } else {
            this.position.y = this.tPosition.y;
            return this.busy = false;
          }
          break;
        case 'left':
          if (this.tPosition.x < this.position.x) {
            moved = true;
            return this.position.x -= pxPerFrame;
          } else {
            this.position.x = this.tPosition.x;
            return this.busy = false;
          }
          break;
        case 'right':
          if (this.tPosition.x > this.position.x) {
            moved = true;
            return this.position.x += pxPerFrame;
          } else {
            this.position.x = this.tPosition.x;
            return this.busy = false;
          }
      }
    }
  };

  return Player;

})();
