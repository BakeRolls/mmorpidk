// Generated by CoffeeScript 1.6.2
var Map;

Map = (function() {
  function Map() {
    this.map;
    this.sprite = new Image;
  }

  Map.prototype.resize = function() {
    if (this.map !== void 0) {
      canvas.width = this.map.width * this.map.tilewidth;
      return canvas.height = this.map.height * this.map.tileheight;
    }
  };

  Map.prototype.draw = function() {
    var layer, _i, _len, _ref, _results;

    _ref = this.map.layers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      _results.push((function(layer) {
        var player, _j, _len1, _results1;

        if (layer.name === 'player') {
          _results1 = [];
          for (_j = 0, _len1 = players.length; _j < _len1; _j++) {
            player = players[_j];
            _results1.push((function(player) {
              return player.draw();
            })(player));
          }
          return _results1;
        } else {
          return this.map.drawLayer(layer.name);
        }
      })(layer));
    }
    return _results;
  };

  Map.prototype.drawLayer = function(layer_name) {
    var layer, th, tw, _i, _len, _ref, _results;

    tw = this.map.tilesets[0].imagewidth / this.map.tilesets[0].tilewidth;
    th = this.map.tilesets[0].imageheight / this.map.tilesets[0].imageheight;
    _ref = this.map.layers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      layer = _ref[_i];
      if (layer.name === layer_name && layer.type === 'tilelayer') {
        _results.push((function(layer) {
          var data, height, i, width, x, y, _j, _len1, _ref1, _results1;

          i = 0;
          x = 0;
          y = -1;
          width = layer.width;
          height = layer.height;
          _ref1 = layer.data;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            data = _ref1[_j];
            _results1.push((function(data) {
              var px, py, tileIndex;

              tileIndex = data - 1;
              if (i++ % width === 0) {
                y++;
                x = 0;
              }
              if (tileIndex >= 0) {
                px = Math.floor(tileIndex % tw);
                py = Math.floor((tileIndex - px) / tw);
                ctx.drawImage(this.map.sprite, px * 32, py * 32, 32, 32, x * 32, y * 32, 32, 32);
              }
              return x++;
            })(data));
          }
          return _results1;
        })(layer));
      }
    }
    return _results;
  };

  Map.prototype.loadMap = function() {
    var self;

    self = this;
    this.sprite.src = 'img/terrain_atlas.png';
    return this.sprite.addEventListener('load', function() {
      var xhr;

      xhr = new XMLHttpRequest;
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
          return self.map = JSON.parse(xhr.responseText);
        }
      };
      xhr.open('GET', 'map.json', true);
      return xhr.send(null);
    });
  };

  return Map;

})();
